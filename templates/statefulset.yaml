{{- $replicas := int .Values.replicas }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "apache-nifi.fullname" . }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ include "apache-nifi.name" . }}
    app.kubernetes.io/part-of: nifi
    app.kubernetes.io/version: {{ .Chart.Version }}
    helm.sh/chart: {{ include "apache-nifi.chart" . }}
spec:
  podManagementPolicy: {{ .Values.sts.podManagementPolicy }}
  serviceName: {{ template "apache-nifi.fullname" . }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/name: {{ include "apache-nifi.name" . }}
  template:
    metadata:
      annotations:
        checksum/properties: {{ tpl (.Files.Glob "configs/*.properties").AsConfig . | sha256sum }}
        checksum/statefulset: {{ .Files.Get (print $.Template.BasePath "/statefulset.yaml") | sha256sum }}
        checksum/values: {{ toYaml .Values | sha256sum }}
{{- if .Values.sts.pod.annotations }}
{{ toYaml .Values.sts.pod.annotations | indent 8 }}
{{- else }}
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
{{- end }}
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "apache-nifi.name" . }}
        app.kubernetes.io/part-of: nifi
{{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 8 }}
{{- end }}
    spec:
{{- if .Values.sts.useHostNetwork }}
      hostNetwork: {{ .Values.sts.useHostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
{{- if .Values.sts.hostAliases }}
      hostAliases:
{{ toYaml .Values.sts.hostAliases | indent 8 }}
{{- end }}
      serviceAccountName: {{ include "apache-nifi.serviceAccountName" . }}
      {{- if eq .Values.sts.AntiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - {{ include "apache-nifi.name" . | quote }}
              topologyKey: "kubernetes.io/hostname"
      {{- else if eq .Values.sts.AntiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app.kubernetes.io/name"
                        operator: In
                        values:
                         - {{ include "apache-nifi.name" . | quote }}
                 topologyKey: "kubernetes.io/hostname"
      {{- end }}
{{- if and .Values.affinity (and (ne .Values.sts.AntiAffinity "hard") (ne .Values.sts.AntiAffinity "soft")) }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.securityContext }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
{{- end }}
      initContainers:
{{- if .Values.properties.isNode }}
      - name: zookeeper
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        command:
        - sh
        - -c
        - |
          echo trying to contact {{ template "zookeeper.server" . }} {{ .Values.zookeeper.port }}
          until nc -vzw 1 {{ template "zookeeper.server" . }} {{ .Values.zookeeper.port }}; do
            echo "waiting for zookeeper..."
            sleep 2
          done
{{- end }}
{{- range $key, $value := .Values.initContainers }}
      - name: {{ $key }}
{{ toYaml $value | indent 8 }}
{{- end }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
{{- if .Values.extraContainers }}
{{- toYaml .Values.extraContainers | nindent 6 }}
{{- end }}
      - name: server
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        image: "{{ .Values.image.repository }}:{{ default .Chart.AppVersion .Values.image.tag }}"
        command:
        - bash
        - -ce
        - |
          prop_replace () {
            target_file=${NIFI_HOME}/conf/${3:-nifi.properties}
            echo "updating ${1} in ${target_file}"
            if egrep "^${1}=" ${target_file} &> /dev/null; then
              sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
            else
              echo ${1}=${2} >> ${target_file}
            fi
          }
{{- if .Values.sts.useHostNetwork }}
          FQDN="0.0.0.0"
{{- else }}
          FQDN="node${HOSTNAME##*-}-{{ .Values.clusterName }}"
{{- end }}

          cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"

{{- if .Values.auth.ldap.enabled }}
          cat "${NIFI_HOME}/conf/authorizers.temp" > "${NIFI_HOME}/conf/authorizers.xml"
          cat "${NIFI_HOME}/conf/login-identity-providers-ldap.xml" > "${NIFI_HOME}/conf/login-identity-providers.xml"
{{- else if .Values.auth.oidc.enabled }}
          prop_replace nifi.security.user.login.identity.provider ''
          prop_replace nifi.security.user.authorizer managed-authorizer
          prop_replace nifi.security.user.oidc.discovery.url '{{ .Values.auth.oidc.discoveryUrl }}'
          prop_replace nifi.security.user.oidc.client.id '{{ .Values.auth.oidc.clientId }}'
{{- if .Values.auth.oidc.clientSecret }}
          prop_replace nifi.security.user.oidc.client.secret '{{ .Values.auth.oidc.clientSecret }}'
{{- end }}
          prop_replace nifi.security.user.oidc.claim.identifying.user '{{ .Values.auth.oidc.claimIdentifyingUser }}'
          xmlstarlet ed --inplace --delete "//authorizers/authorizer[identifier='single-user-authorizer']" "${NIFI_HOME}/conf/authorizers.xml"
          xmlstarlet ed --inplace --update "//authorizers/userGroupProvider/property[@name='Users File']" -v './auth-conf/users.xml' "${NIFI_HOME}/conf/authorizers.xml"
          xmlstarlet ed --inplace --delete "//authorizers/userGroupProvider/property[@name='Initial User Identity 1']" "${NIFI_HOME}/conf/authorizers.xml"
          xmlstarlet ed --inplace \
                        --subnode "authorizers/userGroupProvider" --type 'elem' -n 'property' \
                          --value {{ .Values.auth.oidc.admin | quote }} \
                        --insert "authorizers/userGroupProvider/property[not(@name)]" --type attr -n name \
                          --value "Initial User Identity {{ .Values.replicas }}" \
                        "${NIFI_HOME}/conf/authorizers.xml"
          xmlstarlet ed --inplace --update "//authorizers/accessPolicyProvider/property[@name='Initial Admin Identity']" -v {{ .Values.auth.oidc.admin | quote }} "${NIFI_HOME}/conf/authorizers.xml"
          xmlstarlet ed --inplace --update "//authorizers/accessPolicyProvider/property[@name='Authorizations File']" -v './auth-conf/authorizations.xml' "${NIFI_HOME}/conf/authorizers.xml"
          {{- if .Values.properties.isNode }}
                      xmlstarlet ed --inplace --delete "authorizers/accessPolicyProvider/property[@name='Node Identity 1']" "${NIFI_HOME}/conf/authorizers.xml"
            {{ range untilStep 0 (int .Values.replicas) 1 }}
                      xmlstarlet ed --inplace \
                                    --subnode "authorizers/accessPolicyProvider" --type 'elem' -n 'property' \
                                    --value "CN={{ printf "node%d-%s" . $.Values.clusterName }}" \
                                    --insert "authorizers/accessPolicyProvider/property[not(@name)]" --type attr -n name \
                                    --value "Node Identity {{ . }}" \
                                    "${NIFI_HOME}/conf/authorizers.xml"
                      xmlstarlet ed --inplace \
                                    --subnode "authorizers/userGroupProvider" --type 'elem' -n 'property' \
                                    --value "CN={{ printf "node%d-%s" . $.Values.clusterName }}" \
                                    --insert "authorizers/userGroupProvider/property[not(@name)]" --type attr -n name \
                                    --value "Initial User Identity {{ . }}" \
                                    "${NIFI_HOME}/conf/authorizers.xml"
            {{/* range untilStep 0 (int .Values.replicas ) 1 */}}{{ end }}
          {{- end }}
{{- else if .Values.auth.clientAuth.enabled }}
          cat "${NIFI_HOME}/conf/authorizers.temp" > "${NIFI_HOME}/conf/authorizers.xml"
          xmlstarlet ed --inplace --delete "//authorizers/authorizer[identifier='single-user-authorizer']" "${NIFI_HOME}/conf/authorizers.xml"
{{- else if .Values.auth.singleUser.username }}
          bin/nifi.sh set-single-user-credentials {{ .Values.auth.singleUser.username }} {{ .Values.auth.singleUser.password }}
{{- end }}

{{ if .Values.customFlow }}
          gzip < {{ .Values.customFlow }} > /opt/nifi/data/flow.xml.gz
{{ else }}
          if ! test -f /opt/nifi/data/flow.xml.gz && test -f /opt/nifi/data/flow.xml; then
            gzip /opt/nifi/data/flow.xml
          fi
{{ end }}

          # Host configuration
          prop_replace nifi.cluster.load.balance.host ${FQDN}
          prop_replace nifi.cluster.node.address ${FQDN}
          prop_replace nifi.remote.input.host ${FQDN}
          prop_replace nifi.web.https.host ${FQDN}

          if [[ ! -r "{{ .Values.auth.SSL.keystorePath }}" ]]; then
            echo >&2 "{{ .Values.auth.SSL.keystorePath }} is not readable!"
            sleep 300
            exit 1
          fi

          if [[ ! -r "{{ .Values.auth.SSL.truststorePath }}" ]]; then
            echo >&2 "{{ .Values.auth.SSL.truststorePath }} is not readable!"
            sleep 300
            exit 1
          fi

{{- if .Values.properties.safetyValve }}
  {{- range $prop, $val := .Values.properties.safetyValve }}
          prop_replace {{ $prop }} '{{ $val }}' nifi.properties
  {{- end }}
{{- end }}

{{- if .Values.properties.sensitiveKeySetFile }}
          if [ ! -r {{ .Values.properties.sensitiveKeySetFile | quote }} ]
          then
{{- if .Values.properties.sensitiveKeyPrior }}
            prop_replace nifi.sensitive.props.key {{ .Values.properties.sensitiveKeyPrior | quote }}
{{- /* if .Values.properties.sensitiveKeyPrior */}}{{ else }}
            prop_replace nifi.sensitive.props.key ""
{{- /* if .Values.properties.sensitiveKeyPrior */}}{{ end }}
            bin/nifi.sh set-sensitive-properties-key {{ .Values.properties.sensitiveKey | quote }}
            touch {{ .Values.properties.sensitiveKeySetFile | quote }}
          fi
{{- /* if .Values.properties.sensitiveKeySetFile */}}{{ end }}

          for f in "${NIFI_HOME}/conf/authorizers.xml" "${NIFI_HOME}/conf/login-identity-providers.xml" ${NIFI_HOME}/conf/nifi.properties
          do
            echo === $f ===
            cat $f
          done
          echo === end of files ===

          function prop () {
            target_file=${NIFI_HOME}/conf/nifi.properties
            egrep "^${1}=" ${target_file} | cut -d'=' -f2
          }

          executeTrap() {
             echo Received trapped signal, beginning shutdown...;
             ./bin/nifi.sh stop;
             exit 0;
          }

          trap executeTrap TERM HUP INT;
          trap ":" EXIT

          exec bin/nifi.sh run & nifi_pid="$!"
          echo NiFi running with PID ${nifi_pid}.
          wait ${nifi_pid}
          echo >&2 "NiFi exited with status $?"
          sleep 300

        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
{{- if .Values.metrics.prometheus.enabled }}
        - containerPort: {{ .Values.metrics.prometheus.port }}
          name: metrics
          protocol: TCP
{{- end }}
        - containerPort: {{ .Values.properties.httpsPort }}
{{- if .Values.sts.hostPort }}
          hostPort: {{ .Values.sts.hostPort }}
{{- end }}
          name: https
          protocol: TCP
        - containerPort: {{ .Values.properties.clusterPort }}
          name: cluster
          protocol: TCP
        - containerPort: {{ .Values.properties.loadBalance.port }}
          name: loadbalance
          protocol: TCP
        env:
        - name: NIFI_CLUSTER_NAME
          value: '{{ .Values.clusterName }}'
{{- if not (or (.Values.auth.ldap.enabled) (.Values.auth.oidc.enabled)) }}
        - name: NIFI_WEB_HTTPS_HOST
          value: 0.0.0.0
{{- end }}
{{- if .Values.env }}
{{ toYaml .Values.env | indent 8 }}
{{- end }}
{{- if .Values.envFrom }}
        envFrom:
{{ toYaml .Values.envFrom | indent 8 }}
{{- end }}
{{- if .Values.postStart }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", {{ .Values.postStart | quote }}]
{{- end }}
{{- if .Values.sts.livenessProbe.enabled }}
        livenessProbe:
{{- if not .Values.sts.startupProbe.enabled }}
          initialDelaySeconds: 60
{{- end }}
          periodSeconds: {{ .Values.sts.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.sts.livenessProbe.failureThreshold }}
          tcpSocket:
            port: {{ .Values.properties.httpsPort }}
{{- end }}
{{- if .Values.sts.startupProbe.enabled }}
        startupProbe:
          failureThreshold: {{ .Values.sts.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.sts.startupProbe.periodSeconds }}
          tcpSocket:
            port: {{ .Values.properties.httpsPort }}
{{- end }}
        volumeMounts:
          - mountPath: /opt/nifi/nifi-current/logs
            name: "logs"
          - mountPath: /opt/nifi/data
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: data
            {{- else }}
            name: "data"
            {{- end }}
          - mountPath: /opt/nifi/nifi-current/auth-conf
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: auth-conf
            {{- else }}
            name: "auth-conf"
            {{- end }}
          - mountPath: /opt/nifi/flowfile_repository
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: flowfile-repository
            {{- else }}
            name: "flowfile-repository"
            {{- end }}
          - mountPath: /opt/nifi/content_repository
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: content-repository
            {{- else }}
            name: "content-repository"
            {{- end }}
          - mountPath: /opt/nifi/provenance_repository
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: provenance-repository
            {{- else }}
            name: "provenance-repository"
            {{- end }}
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-current/conf/nifi.temp
            subPath: "nifi.temp"
          - name: "authorizers-temp"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
            subPath: "authorizers.temp"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "login-identity-providers-ldap-xml"
            mountPath: /opt/nifi/nifi-current/conf/login-identity-providers-ldap.xml
            subPath: "login-identity-providers-ldap.xml"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-current/conf/state-management.xml
            subPath: "state-management.xml"
          - name: "logback-xml"
            mountPath: /opt/nifi/nifi-current/conf/logback.xml
            subPath: "logback.xml"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
            subPath: "zookeeper.properties"
{{- if .Values.fips.enabled }}
          - name: "java-security"
            mountPath: /opt/nifi/nifi-current/conf/java.security
            subPath: "java.security"
{{- end }}
{{- if .Values.customFlow }}
          - name: "flow-content"
            mountPath: /opt/nifi/data/flow.xml
            subPath: "flow.xml"
{{- end }}
          {{- range $secret := .Values.secrets }}
            {{- if $secret.mountPath }}
              {{- if $secret.keys }}
                {{- range $key := $secret.keys }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}/{{ $key }}
            subPath: {{ $key }}
            readOnly: true
                {{- end }}
              {{- else }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}
            readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- range $configmap := .Values.configmaps }}
            {{- if $configmap.mountPath }}
              {{- if $configmap.keys }}
                {{- range $key := $configmap.keys }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $configmap.name }}
            mountPath: {{ $configmap.mountPath }}/{{ $key }}
            subPath: {{ $key }}
            readOnly: true
                {{- end }}
              {{- else }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $configmap.name }}
            mountPath: {{ $configmap.mountPath }}
            readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 10 }}
          {{- end }}
      - name: app-log
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        args:
          - /bin/sh
          - -c
          - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-app.log & wait $!
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - mountPath: /var/log
          name: "logs"
      - name: bootstrap-log
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        args:
          - /bin/sh
          - -c
          - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-bootstrap.log & wait $!
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - mountPath: /var/log
          name: "logs"
      - name: user-log
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        args:
          - /bin/sh
          - -c
          - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-user.log & wait $!
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - mountPath: /var/log
          name: "logs"
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "nifi.properties"
              path: "nifi.temp"
      - name: "authorizers-temp"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.temp"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "login-identity-providers-ldap-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "login-identity-providers-ldap.xml"
              path: "login-identity-providers-ldap.xml"
      - name: "state-management-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "state-management.xml"
              path: "state-management.xml"
      - name: "logback-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "logback.xml"
              path: "logback.xml"
      - name: "zookeeper-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
{{- if .Values.fips.enabled }}
      - name: "java-security"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "java.security"
              path: "java.security"
{{- end }}
{{- if .Values.customFlow }}
      - name: "flow-content"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "flow.xml"
              path: "flow.xml"
{{- end }}
      {{- range .Values.secrets }}
      - name: {{ include "apache-nifi.fullname" $ }}-{{ .name }}
        secret:
          secretName: {{ .name }}
      {{- end }}
      {{- range .Values.configmaps }}
      - name: {{ include "apache-nifi.fullname" $ }}-{{ .name }}
        configMap:
          name: {{ .name }}
      {{- end }}
      - name: logs
        emptyDir: {}
{{- if not .Values.persistence.enabled }}
      - name: auth-conf
        emptyDir: {}
      - name: data
        emptyDir: {}
      - name: flowfile-repository
        emptyDir: {}
      - name: content-repository
        emptyDir: {}
      - name: provenance-repository
        emptyDir: {}
{{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 6 }}
{{- end }}
{{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.persistence.subPath.name }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.subPath.size }}
{{- end }}
{{- if and .Values.persistence.enabled (not .Values.persistence.subPath.enabled) }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.dataStorage.size }}
    - metadata:
        name: flowfile-repository
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.flowfileRepoStorage.size }}
    - metadata:
        name: content-repository
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.contentRepoStorage.size }}
    - metadata:
        name: provenance-repository
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.provenanceRepoStorage.size }}
    - metadata:
        name: auth-conf
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.authconfStorage.size }}
{{- end }}
